//1
public boolean scoresIncreasing(int[] scores) {
  for(int i=0;i<scores.length-1;i++)
  {
    if(scores[i]>scores[i+1])
    return false;
  }
  return true;
}


//2
public boolean scores100(int[] scores) {
  for(int i=0;i<scores.length-1;i++)
    if(scores[i]==100 && scores[i+1]==100)
      return true;
  return false;
}


//3
public boolean scoresClump(int[] scores) {
  for(int i=0;i<scores.length-2;i++)
  if(scores[i+1]-scores[i]<=2 && scores[i+2]-scores[i]<=2 && scores[i+2]-scores[i+1]<=2)
  return true;
  return false;
}

//4
public int scoresAverage(int[] scores) {
  int first=average(scores, 0, scores.length/2);
  int last=average(scores, scores.length/2, scores.length);
  return Math.max(first, last);
}

public int average(int[] scores, int start, int end){
  int avg=0;
  for(int i=start; i<end;i++)
    avg+=scores[i];
  return avg/(end-start);
}

//5
public int wordsCount(String[] words, int len) {
  int count=0;
  for(int i=0;i<words.length;i++) 
  {
    if(words[i].length()==len)
      count++;
  }
  
  return count;
}

//6
public String[] wordsFront(String[] words, int n) {
  String[] arr = new String[n];
  for(int i= 0;i<arr.length;i++)
    arr[i]=words[i];
  return arr;
}


//7
public List wordsWithoutList(String[] words, int len) {
  ArrayList<String> list = new ArrayList<String>();
  for(int i = 0; i < words.length; i++) 
    if(words[i].length() != len)
    list.add(words[i]);
  return list;
}

//8
public boolean hasOne(int n) {
  while(n!=0)
  {
    if(n%10==1) return true;
    n/=10;
  }
  return false;
}

//9
public boolean dividesSelf(int n) {
  int t=n;
  while(t>=1)
  {
    if(t%10==0) return false;
    if(n%(t%10)!=0) return false;
    t/=10;
  }
  return true;
}


//10
public int[] copyEvens(int[] nums, int count) {
  int [] a = new int [count];
  int c=0;
  for(int i=0;i<nums.length && c<count;i++)
  if(nums[i]%2==0)
  a[c++]=nums[i];
  return a;
}


//11
public int[] copyEndy(int[] nums, int count) {
  int [] a = new int [count];
  int c=0,i;
  for(i=0;i<nums.length && c<count;i++)
  if(isEndy(nums[i]))
  a[c++]=nums[i];
  return a;
}

public boolean isEndy(int n)
{
  if((n>=0 && n<=10) || (n>=90 && n<=100))
  return true;
  return false;
}

//12
public int matchUp(String[] a, String[] b) {
  int count = 0;
    
    for(int i = 0; i < a.length; i++) {
        if(a[i].length() > 0 && b[i].length() > 0 && 
            a[i].charAt(0) == b[i].charAt(0))
            count++;
    }
    
    return count;
}


//13
public int scoreUp(String[] key, String[] answers) {
  int score = 0;
  for(int i = 0; i < key.length; i++) 
    if(key[i].charAt(0) == answers[i].charAt(0)) 
    score += 4;
    else if(answers[i].charAt(0) != '?') 
    score -= 1;
  return score;
}


//14
public String[] wordsWithout(String[] words, String target) {
  int count = 0;
    
    for(int i = 0; i < words.length; i++) {
        if(!words[i].equals(target))
            count++;
    }
    
    String[] arr = new String[count];
    int index = 0;
    
    for(int i = 0; index < count; i++) {
        if(!words[i].equals(target)) {
            arr[index] = words[i];
            index++;
        }
    }
    
    return arr;
}


//15
public int scoresSpecial(int[] a, int[] b) {
  return largestSpecial(a)+largestSpecial(b);
}

public int largestSpecial(int[] a) {
    int l = 0;
    for(int i = 0; i < a.length; i++) 
    if(a[i] % 10 == 0 && a[i] > l)
    l = a[i];
  return l;
}


//16
public int sumHeights(int[] heights, int start, int end) {
  int s = 0;
  for(int i = start; i < end; i++)
    s += Math.abs(heights[i] - heights[i+1]);
  return s;
}


//17
public int sumHeights2(int[] heights, int start, int end) {
  int sum = 0;
  for(int i = start; i < end; i++)
  if(heights[i] < heights[i+1])
  sum = sum + 2 * (heights[i+1] - heights[i]);
  else
  sum = sum + heights[i] - heights[i+1];
  return sum;
}


//18
public int bigHeights(int[] heights, int start, int end) {
  int c=0;
  for(int i=start;i<end;i++)
  if(Math.abs(heights[i]-heights[i+1])>=5)
  c++;
  return c;
}


//19
public int userCompare(String aName, int aId, String bName, int bId) {
  if(aName.compareTo(bName)<0)
  return -1;
  else if(aName.compareTo(bName)>0 || aId>bId)
  return 1;
  else if(aId<bId)
  return -1;
  return 0;
}

//20
public String[] mergeTwo(String[] a, String[] b, int n) {
  String[] arr = new String[n];
    int aIndex = 0;
    int bIndex = 0;
        
    for(int index = 0; index < n; index++) {
        if(a[aIndex].compareTo(b[bIndex]) < 0) {
            arr[index] = a[aIndex];
            aIndex++;
        } else if(a[aIndex].compareTo(b[bIndex]) > 0) {
            arr[index] = b[bIndex];
            bIndex++;
        } else {
            arr[index] = a[aIndex];
            aIndex++;
            bIndex++;
        }
    }
    
    return arr;
}


//21
public int commonTwo(String[] a, String[] b) {
  int c=0;
    int aIndex = 0;
    int bIndex = 0;
        
    if(a[0].equals(b[0])) {
        c++;
        aIndex++;
        bIndex++;
    } else if(a[0].compareTo(b[0]) < 0) {
        aIndex++;
    } else {
        bIndex++;
    }
    
    while(aIndex < a.length && bIndex < b.length) {
        if(aIndex > 0 && a[aIndex-1].equals(a[aIndex])) {
            aIndex++;
        } else if(a[aIndex].equals(b[bIndex])) {
            c++;
            aIndex++;
            bIndex++;
        } else if(a[aIndex].compareTo(b[bIndex]) < 0) {
            aIndex++;
        } else {
            bIndex++;
        }
    }
    
    return c;
}

